
zorg dat vijanden die buiten beeld zijn verwijderd worden
chat GPT:
 this.vijanden.forEach((vijand, index) => {
      vijand.beweeg();

      // Verwijder vijanden die buiten het scherm zijn
      if (vijand.x < 0) {
        this.vijanden.splice(index, 1);
      }
    });
  }


zorg dat de random functie sommige types vaker laat voorkomen
  function randomVijand(l) {
  let kans = random(100); // Genereer een willekeurig getal tussen 0 en 100

  if (kans < 40) {
    return new VijandType1(l); // 40% kans
  } else if (kans < 70) {
    return new VijandType2(l); // 30% kans
  } else if (kans < 85) {
    return new VijandType3(l); // 15% kans
  } else if (kans < 95) {
    return new VijandType4(l); // 10% kans
  } else {
    return new VijandType5(l); // 5% kans
  }
}

maak een manier waarop de highschore blijft staan
  teken() {
    background('navy');

    if (this.beginscherm) {
      this.speelveld.tekenBeginscherm();
      if (keyIsDown(ENTER)) {
        this.spelStarten();
      }
    } else if (this.spelActief) {
      this.speelveld.tekenActiefSpel();
      this.toonPunten(); // Toon de punten tijdens het spel
    } else if (this.afgelopen) {
      this.speelveld.eindScherm();
      this.toonPunten(); // Toon punten op het eindscherm
      if (keyIsDown(ENTER)) {
        this.nieuwSpel();
      }
    }
  }

  slaHighScoreOp() {
    localStorage.setItem('highScore', this.highScore); // Sla highscore op in de browser
  }

  laadHighScore() {
    return parseInt(localStorage.getItem('highScore')) || 0; // Laad opgeslagen highscore, standaard 0
  }

  zorg ervoor dat de hero maar 1x beweegt als je op een toets drukt
    if (keyIsPressed) {
      if (key === 'a' && !this.movingLeft) { 
        this.x -= this.snelheid;
        this.movingLeft = true;
      } 
      else if (key === 'd' && !this.movingRight) {
        this.x += this.snelheid;
        this.movingRight = true;
      }
    } 
    else {
      this.movingLeft = false;
      this.movingRight = false;
    }